<#
.SYNOPSIS
    Genera un objeto LDAP (DirectoryEntry) conectado a un Domain Controller.

.DESCRIPTION
    Este script crea un objeto System.DirectoryServices.DirectoryEntry para interactuar con Active Directory.
    Es útil para scripts que necesitan consultar objetos del dominio, como usuarios, grupos, unidades organizativas, etc.

.PARAMETER Username
    Nombre de usuario para autenticarse (formato: usuario o dominio\usuario).

.PARAMETER Password
    Contraseña asociada al usuario.

.PARAMETER Domain
    (Opcional) Nombre FQDN del dominio (por ejemplo, contoso.local). Si se omite, se detecta automáticamente.

.PARAMETER PDCName
    (Opcional) Nombre del Domain Controller (por ejemplo, DC01). Si se omite, se detecta automáticamente.

.EXAMPLE
    .\Get-LDAPConnection.ps1 -Username 'pete' -Password 'Nexus123!'

.NOTES
    Puedes importar este script desde tu wizard y reutilizar el objeto LDAP para otras operaciones.
#>

param (
    [Parameter(Mandatory=$true)]
    [string]$Username,

    [Parameter(Mandatory=$true)]
    [string]$Password,

    [string]$Domain = $null,
    [string]$PDCName = $null
)

try {
    if (-not $Domain) {
        $domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
    } else {
        $context = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext("Domain", $Domain)
        $domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain($context)
    }

    if (-not $PDCName) {
        $PDC = ($domainObj.PdcRoleOwner).Name
    } else {
        $PDC = $PDCName
    }

    $DistinguishedName = "DC=$($domainObj.Name.Replace('.', ',DC='))"
    $SearchString = "LDAP://$PDC/$DistinguishedName"

    Write-Verbose "Connecting to LDAP path: $SearchString"

    $ADEntry = New-Object System.DirectoryServices.DirectoryEntry($SearchString, $Username, $Password)
    return $ADEntry
}
catch {
    Write-Error "Error establishing LDAP connection: $_"
    exit 1
}
